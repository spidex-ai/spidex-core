name: Deploy Production
run-name: ${{ github.actor }} is deploying production branch 🚀

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all containers'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - 'production'

env:
  NODE_ENV: production
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  deploy:
    name: Deploy to Production
    runs-on: [spidex-core-prod-runner]
    timeout-minutes: 30

    steps:
      - name: 🛒 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.11'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci --only=production
          npm run build

      - name: 🔐 Create service account file
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" | base64 -d > ./service-account.json
          chmod 600 ./service-account.json

      - name: 🌍 Setup environment file
        run: |
          # Create production environment file from secrets
          cat > .env << EOF
          NODE_ENV=production
          APP_NAME="${{ secrets.APP_NAME || 'Spidex Core' }}"
          APP_DESCRIPTION="${{ secrets.APP_DESCRIPTION || 'Spidex Core API' }}"
          APP_GLOBAL_PREFIX="${{ secrets.APP_GLOBAL_PREFIX || '/api' }}"
          APP_SWAGGER_PATH="${{ secrets.APP_SWAGGER_PATH || '/swagger' }}"
          APP_DOCS_SCHEMA="${{ secrets.APP_DOCS_SCHEMA || 'https' }}"
          APP_VERSION="${{ secrets.APP_VERSION || '1.0.0' }}"
          APP_HOST="${{ secrets.APP_HOST || '0.0.0.0' }}"
          APP_PORT="${{ secrets.APP_PORT || '8000' }}"
          APP_HOST_NAME="${{ secrets.APP_HOST_NAME || 'api.spidex.ag' }}"
          APP_BASE_URL="${{ secrets.APP_BASE_URL || 'https://api.spidex.ag' }}"

          # JWT Configuration
          JWT_ACCESS_TOKEN_SECRET="${{ secrets.JWT_ACCESS_TOKEN_SECRET }}"
          JWT_ACCESS_TOKEN_EXPIRATION_TIME="${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION_TIME || '3600000' }}"
          JWT_REFRESH_TOKEN_SECRET="${{ secrets.JWT_REFRESH_TOKEN_SECRET }}"
          JWT_REFRESH_TOKEN_EXPIRATION_TIME="${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION_TIME || '86400000' }}"

          # Database Configuration
          DB_TYPE="${{ secrets.DB_TYPE || 'postgres' }}"
          DB_HOST="${{ secrets.DB_HOST || 'postgres' }}"
          DB_PORT="${{ secrets.DB_PORT || '8001' }}"
          DB_USERNAME="${{ secrets.DB_USERNAME }}"
          DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          DB_NAME="${{ secrets.DB_NAME }}"
          DB_SYNC="${{ secrets.DB_SYNC || 'false' }}"
          DB_LOG="${{ secrets.DB_LOG || 'false' }}"
          DB_RETRY_ATTEMPT="${{ secrets.DB_RETRY_ATTEMPT || '3' }}"
          DB_RETRY_DELAY="${{ secrets.DB_RETRY_DELAY || '5000' }}"
          DB_EXTRA="${{ secrets.DB_EXTRA || '{"connectionLimit":20}' }}"
          DB_MAX_CONNECTIONS="${{ secrets.DB_MAX_CONNECTIONS || '100' }}"
          DB_SSL_ENABLED="${{ secrets.DB_SSL_ENABLED || 'false' }}"
          DB_REJECT_UNAUTHORIZED="${{ secrets.DB_REJECT_UNAUTHORIZED || 'false' }}"
          DB_CA="${{ secrets.DB_CA || '' }}"
          DB_KEY="${{ secrets.DB_KEY || '' }}"
          DB_CERT="${{ secrets.DB_CERT || '' }}"
          DB_URL="${{ secrets.DB_URL || '' }}"

          # Adminer
          ADMINER_PORT="${{ secrets.ADMINER_PORT || '8002' }}"

          # Redis Configuration
          REDIS_PORT="${{ secrets.REDIS_PORT || '6383' }}"
          REDIS_HOST="${{ secrets.REDIS_HOST || 'redis' }}"
          REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD || '' }}"
          REDIS_DB="${{ secrets.REDIS_DB || '0' }}"

          # External Services
          S3_ACCESS_KEY_ID="${{ secrets.S3_ACCESS_KEY_ID }}"
          S3_SECRET_ACCESS_KEY="${{ secrets.S3_SECRET_ACCESS_KEY }}"
          S3_BUCKET="${{ secrets.S3_BUCKET }}"
          S3_REGION="${{ secrets.S3_REGION }}"
          S3_PREVIEW_URL="${{ secrets.S3_PREVIEW_URL }}"
          S3_URL="${{ secrets.S3_URL }}"

          # Firebase
          FIREBASE_SERVICE_ACCOUNT_PATH="service-account.json"

          # X/Twitter API
          X_BASE_URL="${{ secrets.X_BASE_URL || 'https://api.x.com/2' }}"
          X_CLIENT_ID="${{ secrets.X_CLIENT_ID }}"
          X_CLIENT_SECRET="${{ secrets.X_CLIENT_SECRET }}"

          # Kafka Configuration
          KAFKA_PROVIDER="${{ secrets.KAFKA_PROVIDER || 'kafka' }}"
          KAFKA_BROKERS="${{ secrets.KAFKA_BROKERS || 'kafka-0:9092' }}"
          KAFKA_EXTERNAL_PORT="${{ secrets.KAFKA_EXTERNAL_PORT || '39094' }}"
          KAFKA_CLIENT_ID="${{ secrets.KAFKA_CLIENT_ID || 'spidex-core' }}"
          KAFKA_SSL="${{ secrets.KAFKA_SSL || 'false' }}"
          KAFKA_REGION="${{ secrets.KAFKA_REGION || 'us-east-1' }}"
          KAFKA_UI_PORT="${{ secrets.KAFKA_UI_PORT || '8888' }}"

          # External API URLs
          TAPTOOLS_API_URL="${{ secrets.TAPTOOLS_API_URL || 'https://openapi.taptools.io/api/v1' }}"
          DEXHUNTER_API_URL="${{ secrets.DEXHUNTER_API_URL || 'https://api-us.dexhunterv3.app' }}"
          DEXHUNTER_PARTNER_ID="${{ secrets.DEXHUNTER_PARTNER_ID }}"
          TOKEN_CARDANO_API_URL="${{ secrets.TOKEN_CARDANO_API_URL || 'https://tokens.cardano.org' }}"
          COINGECKO_API_URL="${{ secrets.COINGECKO_API_URL || 'https://api.coingecko.com/api/v3' }}"
          BLOCKFROST_API_URL="${{ secrets.BLOCKFROST_API_URL || 'https://cardano-mainnet.blockfrost.io/api/v0' }}"
          DHAPI_API_URL="${{ secrets.DHAPI_API_URL || 'https://dhapi.io' }}"
          DHAPI_PARTNER_ID="${{ secrets.DHAPI_PARTNER_ID }}"

          # Azure Cosmos DB
          COSMOS_ENDPOINT="${{ secrets.COSMOS_ENDPOINT }}"
          COSMOS_KEY="${{ secrets.COSMOS_KEY }}"

          # Discord (both OAuth2 and Bot)
          DISCORD_BOT_TOKEN="${{ secrets.DISCORD_BOT_TOKEN }}"
          DISCORD_CLIENT_ID="${{ secrets.DISCORD_CLIENT_ID }}"
          DISCORD_CLIENT_SECRET="${{ secrets.DISCORD_CLIENT_SECRET }}"
          DISCORD_GUILD_ID="${{ secrets.DISCORD_GUILD_ID }}"

          # Telegram
          TELEGRAM_BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}"
          TELEGRAM_BOT_USERNAME="${{ secrets.TELEGRAM_BOT_USERNAME }}"
          TELEGRAM_CHANNEL_ID="${{ secrets.TELEGRAM_CHANNEL_ID }}"
          TELEGRAM_AUTH_MAX_AGE="${{ secrets.TELEGRAM_AUTH_MAX_AGE || '86400' }}"

          # RabbitMQ
          RABBITMQ_USER="${{ secrets.RABBITMQ_USER || 'admin' }}"
          RABBITMQ_PASS="${{ secrets.RABBITMQ_PASS || 'admin' }}"
          RABBITMQ_PORT="${{ secrets.RABBITMQ_PORT || '5672' }}"
          RABBITMQ_MANAGEMENT_PORT="${{ secrets.RABBITMQ_MANAGEMENT_PORT || '15672' }}"
          RABBITMQ_URLS="${{ secrets.RABBITMQ_URLS }}"

          # API Keys
          TAPTOOLS_API_KEY="${{ secrets.TAPTOOLS_API_KEY }}"
          COINGECKO_API_KEY="${{ secrets.COINGECKO_API_KEY }}"
          BLOCKFROST_API_KEY="${{ secrets.BLOCKFROST_API_KEY }}"
          FIRECRAWL_API_KEY="${{ secrets.FIRECRAWL_API_KEY }}"
          OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"

          # Other configurations
          CRYPTO_SECRET_KEY="${{ secrets.CRYPTO_SECRET_KEY }}"
          LOG_LEVEL="${{ secrets.LOG_LEVEL || 'INFO' }}"
          IS_WRITE_LOG="${{ secrets.IS_WRITE_LOG || 'true' }}"
          WALLET_SIGN_MESSAGE="${{ secrets.WALLET_SIGN_MESSAGE || 'USER_CONNECT_WALLET' }}"
          GOOGLE_RECAPCHA_SECRET_KEY="${{ secrets.GOOGLE_RECAPCHA_SECRET_KEY }}"
          VERIFICATION_URL="${{ secrets.VERIFICATION_URL }}"
          EOF

          # Set secure permissions
          chmod 600 .env

      - name: 🧹 Cleanup old containers and images
        run: |
          echo "🧹 Stopping and removing old containers..."
          docker compose down --remove-orphans || true

          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "🔄 Force rebuild requested - removing images..."
            docker compose down --rmi all --volumes --remove-orphans || true
            docker system prune -f || true
          fi

      - name: 🐳 Build and deploy with Docker Compose
        run: |
          echo "🏗️ Building and starting services..."
          docker compose up -d --build --force-recreate

          echo "📊 Checking service status..."
          docker compose ps

      - name: 🏥 Health check and verification
        run: |
          echo "⏳ Waiting for services to be ready..."
          sleep 30

          # Check if API is responding
          max_attempts=10
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "🔍 Health check attempt $attempt/$max_attempts..."

            if curl -f -s "http://localhost:${{ secrets.APP_PORT || '8000' }}/api/health" > /dev/null; then
              echo "✅ API is healthy!"
              break
            fi

            if [ $attempt -eq $max_attempts ]; then
              echo "❌ API health check failed after $max_attempts attempts"
              echo "📋 Container logs:"
              docker compose logs --tail=50
              exit 1
            fi

            echo "⏳ Waiting 10 seconds before next attempt..."
            sleep 10
            ((attempt++))
          done

      - name: 📋 Show deployment status
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📊 Final service status:"
          docker compose ps

          echo "💾 Disk usage:"
          df -h

          echo "🐳 Docker system info:"
          docker system df

      - name: 🧹 Cleanup on failure
        if: failure()
        run: |
          echo "❌ Deployment failed - showing logs and cleaning up..."
          docker compose logs --tail=100
          docker compose down || true